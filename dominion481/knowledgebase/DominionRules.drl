package dominion481.knowledgebase

import dominion481.knowledgebase.DominionRecommender.*;
import dominion481.knowledgebase.DominionRecommender.KBCard;
import dominion481.knowledgebase.DominionRecommender.KBCardType;

declare PairRecommendation
	trigger : KBCard @Key
	recommendation : KBCard @Key
	initialValue : int @Key
	triggerBalance : int @Key
	recommendationBalance : int @Key
end

rule "Initial Pair Recommendations"
when
	p : PairRecommendation(t := trigger, r := recommendation)
	tt : TableCard (t := card)
	tr : TableCard (r := card)
then
	tr.recommendation += p.getInitialValue();
end

rule "Recommendation Purchase Update"
when
	dc : DeckCard(card := card)
	p : PairRecommendation(card := trigger, rec := recommendation)
	tt : TableCard (card := card)
	tr : TableCard (rec := card)
then
	tt.recommendation += p.getTriggerBalance();
	tr.recommendation += p.getRecommendationBalance();
end

rule "Always Recommend Province"
when
	t : TableCard(card == KBCard.PROVINCE)
then
	t.recommendation = 9000;
end

rule "Duchy if nothing better"
when
	t : TableCard(card == KBCard.DUCHY)
then
	t.recommendation = 50;
end

rule "Strongly Recommend Gold"
when
	t : TableCard(card == KBCard.GOLD)
then
	t.recommendation = 200;
end

rule "Suggest Silver"
when
	t : TableCard(card == KBCard.SILVER)
then
	t.recommendation = 100;
end

rule "Don't buy Copper"
when
	t : TableCard(card == KBCard.COPPER)
then
	t.recommendation = -1;
end

rule "Suggest Chapel"
when
	t : TableCard(card == KBCard.CHAPEL)
then
	t.recommendation = 75;
end

rule "Only once chapel, normally"
when
	d : DeckCard(card == KBCard.CHAPEL)
	t : TableCard(card == KBCard.CHAPEL)
then
	t.recommendation -= 100;
end

rule "Gardens with +Buy"
when
	gardens : TableCard(card == KBCard.GARDENS)
	buy : TableCard(card.buys > 0)
then
	insert (new PairRecommendation(gardens.getCard(), buy.getCard(), 50, 0, 10));
	insert (new PairRecommendation(buy.getCard(), gardens.getCard(), 40, 0, 50));
end

rule "+Action and +Card"
when
	ta : TableCard(card.getActions() > 1)
	tc : TableCard(card.getCards() > 1)
then
	insert (new PairRecommendation(ta.getCard(), tc.getCard(), 20, tc.getCard().getCards() * 3, 0));
	insert (new PairRecommendation(tc.getCard(), ta.getCard(), 10, 0, 0));
end

rule "+Action and +Coin"
when
	ta : TableCard(card.getActions() > 1)
	tc : TableCard(card.getCoin() > 1)
then
	insert (new PairRecommendation(ta.getCard(), tc.getCard(), 20, tc.getCard().getCoin() * 5, 0));
	insert (new PairRecommendation(tc.getCard(), ta.getCard(), 10, 0, 0));
end

rule "General Value"
when
	tc : TableCard(c : card)
then
	tc.recommendation += (c.getCards() + c.getBuys() + c.getActions()) * 15;
end

rule "Cellar means duchys are go"
when
	tc : TableCard(card == KBCard.CELLAR);
	tv : TableCard(card == KBCard.DUCHY);
then
	tv.recommendation += 50;
end

rule "Devalue terminal actions when +Action not available"
when
	tc : TableCard(card.getActions() == 0, card != KBCard.THRONE_ROOM, card.getType() == KBCardType.ACTION);
	not(TableCard(card.getActions() > 1));
then
	tc.recommendation -= 20;
end

rule "Value draws when +Action not available"
when
	tc : TableCard(card.getCards() > 1);
	not(TableCard(card.getActions() > 1));
then
	tc.recommendation += 40;
end

rule "Which is nice"
when
	tc : TableCard(card == KBCard.WITCH);
then
	tc.recommendation += 30;
end

rule "Bureaucrat is a good, early buy"
when
	tc : TableCard(card == KBCard.BUREAUCRAT);
then
	tc.recommendation += 50;
end

rule "Keep Bureaucrad an early buy"
when
	d : DeckCard();
	tc : TableCard(card == KBCard.BUREAUCRAT);
then
	tc.recommendation -= 10;
end


//Balancing changes

rule "Adventurer loves silver"
when
	d : DeckCard(card == KBCard.SILVER)
	t : TableCard(card == KBCard.ADVENTURER)
then
	t.recommendation += 20;
end

rule "Adventurer loves gold"
when
	d : DeckCard(card == KBCard.GOLD)
	t : TableCard(card == KBCard.ADVENTURER)
then
	t.recommendation += 40;
end

rule "Theif needs things to steal"
when
	e : EnemyCard(card.getType() == KBCardType.TREASURE)
	t : TableCard(card == KBCard.THIEF)
then
	t.recommendation += 15;
end

rule "Theif can't steal non-treasures"
when
	e : EnemyCard(card.getType != KBCardType.TREASURE)
	t : TableCard(card == KBCard.THIEF)
then
	t.recommendation -= 5;
end

rule "Don't buy cellar with Gardens"
when
	d : DeckCard(card == KBCard.GARDENS)
	t : TableCard(card == KBCard.CELLAR)
then
	t.recommendation -= 100;
end

rule "Reduce value on purchase to balance"
when  
	d : DeckCard(card := card)
	t : TableCard(card := card)
then
	t.recommendation -= 1;
end

rule "Gradually increase treasure importance"
when
	d : DeckCard(card.getType() != KBCardType.TREASURE)
	t : TableCard(card.getType() == KBCardType.TREASURE, card != KBCard.COPPER)
then
	t.recommendation += 10;
end

rule "Keep buying copper if Gardens is owned"
when
	d : DeckCard();
	t : TableCard(card == KBCard.COPPER)
	exists (DeckCard(card == KBCard.GARDENS))
then
	t.recommendation = 10;
end

rule "Balance Treasures"
when
	d : DeckCard(card.getType() == KBCardType.TREASURE)
	t : TableCard (card.getType() == KBCardType.TREASURE, card.getType() != KBCard.COPPER)
then
	t.recommendation -= 40;
end

rule "Start Buying Duchies after 20 turns"
when
	d : DeckCard(card != KBCard.DUCHY)
	t : TableCard (card == KBCard.DUCHY)
then
	t.recommendation += 3;
end

rule "Protect against enemy attacks!"
when
	d : EnemyCard(card.isAttack())
	t : TableCard(card == KBCard.MOAT)
then
	t.recommendation += 20;
end

rule "Moat's not THAT good"
when
	d : DeckCard(card == KBCard.MOAT)
	t : TableCard(card == KBCard.MOAT)
then
	t.recommendation /= 2;
end 

rule "Increase +Action on Action Purchase"
when
	d : DeckCard(card.getType() == KBCardType.ACTION)
	t : TableCard(card.getActions() > 1)
then
	t.recommendation += 20;
end

rule "Throne Room is best with actions"
when
	d : DeckCard(card.getType() == KBCardType.ACTION, card != KBCard.THRONE_ROOM)
	t : TableCard(card == KBCard.THRONE_ROOM)
then
	t.recommendation += 40;
end

rule "Throne Room requires action flood"
when
	d : DeckCard(card.getType() != KBCardType.ACTION)
	t : TableCard(card == KBCard.THRONE_ROOM)
then
	t.recommendation -= 10;
end

rule "Throne Room is not good with more throne rooms!"
when
	d : DeckCard(card == KBCard.THRONE_ROOM)
	t : TableCard(card == KBCard.THRONE_ROOM)
then
	t.recommendation -= 60;
end

rule "Don't flood deck with +actions"
when
	d : DeckCard(card.getActions() > 1)
	t : TableCard(card.getActions() > 1)
then
	t.recommendation -= 75;
end

rule "Cellar deals with VP Cards"
when
	d : DeckCard(card.getType() == KBCardType.VICTORY)
	t : TableCard(card == KBCard.CELLAR)
then
	t.recommendation += 30;
end